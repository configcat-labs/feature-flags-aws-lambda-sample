"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RefreshResult = exports.OverrideBehaviour = exports.MapOverrideDataSource = exports.FlagOverrides = exports.User = exports.SettingKeyValue = exports.Setting = exports.RolloutPercentageItem = exports.RolloutRule = exports.ProjectConfig = exports.LogLevel = exports.DataGovernance = exports.PollingMode = exports.createFlagOverridesFromMap = exports.createConsoleLogger = exports.createClientWithLazyLoad = exports.createClientWithManualPoll = exports.createClientWithAutoPoll = exports.createClient = exports.disposeAllClients = exports.getClient = void 0;
var configcatcommon = require("configcat-common");
var configcat_common_1 = require("configcat-common");
var config_fetcher_1 = require("./config-fetcher");
var version_1 = require("./version");
/**
 * Returns an instance of ConfigCatClient for the specified SDK Key.
 * @remarks This method returns a single, shared instance per each distinct SDK Key.
 * That is, a new client object is created only when there is none available for the specified SDK Key.
 * Otherwise, the already created instance is returned (in which case the 'pollingMode' and 'options' arguments are ignored).
 * So, please keep in mind that when you make multiple calls to this method using the same SDK Key, you may end up with multiple references to the same client object.
 * @param sdkKey SDK Key to access configuration
 * @param pollingMode The polling mode to use
 * @param options Options for the specified polling mode
 */
function getClient(sdkKey, pollingMode, options) {
    return configcatcommon.getClient(sdkKey, pollingMode !== null && pollingMode !== void 0 ? pollingMode : configcat_common_1.PollingMode.AutoPoll, options, {
        configFetcher: new config_fetcher_1.HttpConfigFetcher(),
        cache: new configcat_common_1.InMemoryCache(),
        sdkType: "ConfigCat-Node",
        sdkVersion: version_1.default
    });
}
exports.getClient = getClient;
/**
 * Disposes all existing ConfigCatClient instances.
 */
function disposeAllClients() {
    configcatcommon.disposeAllClients();
}
exports.disposeAllClients = disposeAllClients;
/** Create an instance of ConfigCatClient and setup Auto Polling mode with default options
 * @param {string} sdkKey - ConfigCat SdkKey to access your configuration.
 * @param options - Options for Auto Polling
 * @deprecated This function is obsolete and will be removed from the public API in a future major version. To obtain a ConfigCatClient instance with auto polling for a specific SDK Key, please use the 'getClient(sdkKey, PollingMode.AutoPoll, options, ...)' format.
 */
function createClient(sdkKey, options) {
    return createClientWithAutoPoll(sdkKey, options);
}
exports.createClient = createClient;
/**
 * Create an instance of ConfigCatClient and setup Auto Polling mode with custom options
 * @param {string} sdkKey - ConfigCat SdkKey to access your configuration.
 * @param options - Options for Auto Polling
 * @deprecated This function is obsolete and will be removed from the public API in a future major version. To obtain a ConfigCatClient instance with auto polling for a specific SDK Key, please use the 'getClient(sdkKey, PollingMode.AutoPoll, options, ...)' format.
 */
function createClientWithAutoPoll(sdkKey, options) {
    return configcatcommon.createClientWithAutoPoll(sdkKey, {
        configFetcher: new config_fetcher_1.HttpConfigFetcher(),
        cache: new configcat_common_1.InMemoryCache(),
        sdkType: "ConfigCat-Node",
        sdkVersion: version_1.default
    }, options);
}
exports.createClientWithAutoPoll = createClientWithAutoPoll;
/**
 * Create an instance of ConfigCatClient and setup Manual Polling mode with custom options
 * @param {string} sdkKey - ConfigCat SdkKey to access your configuration.
 * @param options - Options for Manual Polling
 * @deprecated This function is obsolete and will be removed from the public API in a future major version. To obtain a ConfigCatClient instance with manual polling for a specific SDK Key, please use the 'getClient(sdkKey, PollingMode.ManualPoll, options, ...)' format.
 */
function createClientWithManualPoll(sdkKey, options) {
    return configcatcommon.createClientWithManualPoll(sdkKey, {
        configFetcher: new config_fetcher_1.HttpConfigFetcher(),
        cache: new configcat_common_1.InMemoryCache(),
        sdkType: "ConfigCat-Node",
        sdkVersion: version_1.default
    }, options);
}
exports.createClientWithManualPoll = createClientWithManualPoll;
/**
 * Create an instance of ConfigCatClient and setup Lazy Loading mode with custom options
 * @param {string} sdkKey - ConfigCat SdkKey to access your configuration.
 * @param options - Option for Lazy Loading
 * @deprecated This function is obsolete and will be removed from the public API in a future major version. To obtain a ConfigCatClient instance with lazy loading for a specific SDK Key, please use the 'getClient(sdkKey, PollingMode.LazyLoad, options, ...)' format.
 */
function createClientWithLazyLoad(sdkKey, options) {
    return configcatcommon.createClientWithLazyLoad(sdkKey, {
        configFetcher: new config_fetcher_1.HttpConfigFetcher(),
        cache: new configcat_common_1.InMemoryCache(),
        sdkType: "ConfigCat-Node",
        sdkVersion: version_1.default
    }, options);
}
exports.createClientWithLazyLoad = createClientWithLazyLoad;
/**
 * Create an instance of ConfigCatConsoleLogger
 * @param logLevel Specifies message's filtering to output for the CofigCatConsoleLogger.
 */
function createConsoleLogger(logLevel) {
    return configcatcommon.createConsoleLogger(logLevel);
}
exports.createConsoleLogger = createConsoleLogger;
function createFlagOverridesFromMap(map, behaviour) {
    return new configcat_common_1.FlagOverrides(new configcat_common_1.MapOverrideDataSource(map), behaviour);
}
exports.createFlagOverridesFromMap = createFlagOverridesFromMap;
/* Public types re-export from common-js */
// These exports should be kept in sync with the exports listed in the section "Public types for end users" of common-js/src/index.ts!
var configcat_common_2 = require("configcat-common");
Object.defineProperty(exports, "PollingMode", { enumerable: true, get: function () { return configcat_common_2.PollingMode; } });
var configcat_common_3 = require("configcat-common");
Object.defineProperty(exports, "DataGovernance", { enumerable: true, get: function () { return configcat_common_3.DataGovernance; } });
var configcat_common_4 = require("configcat-common");
Object.defineProperty(exports, "LogLevel", { enumerable: true, get: function () { return configcat_common_4.LogLevel; } });
var configcat_common_5 = require("configcat-common");
Object.defineProperty(exports, "ProjectConfig", { enumerable: true, get: function () { return configcat_common_5.ProjectConfig; } });
Object.defineProperty(exports, "RolloutRule", { enumerable: true, get: function () { return configcat_common_5.RolloutRule; } });
Object.defineProperty(exports, "RolloutPercentageItem", { enumerable: true, get: function () { return configcat_common_5.RolloutPercentageItem; } });
Object.defineProperty(exports, "Setting", { enumerable: true, get: function () { return configcat_common_5.Setting; } });
var configcat_common_6 = require("configcat-common");
Object.defineProperty(exports, "SettingKeyValue", { enumerable: true, get: function () { return configcat_common_6.SettingKeyValue; } });
var configcat_common_7 = require("configcat-common");
Object.defineProperty(exports, "User", { enumerable: true, get: function () { return configcat_common_7.User; } });
var configcat_common_8 = require("configcat-common");
Object.defineProperty(exports, "FlagOverrides", { enumerable: true, get: function () { return configcat_common_8.FlagOverrides; } });
Object.defineProperty(exports, "MapOverrideDataSource", { enumerable: true, get: function () { return configcat_common_8.MapOverrideDataSource; } });
Object.defineProperty(exports, "OverrideBehaviour", { enumerable: true, get: function () { return configcat_common_8.OverrideBehaviour; } });
var configcat_common_9 = require("configcat-common");
Object.defineProperty(exports, "RefreshResult", { enumerable: true, get: function () { return configcat_common_9.RefreshResult; } });
