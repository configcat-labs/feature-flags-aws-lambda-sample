import type { IAutoPollOptions, IConfigCatClient, IConfigCatLogger, ILazyLoadingOptions, IManualPollOptions, LogLevel } from "configcat-common";
import { FlagOverrides, PollingMode } from "configcat-common";
/**
 * Returns an instance of ConfigCatClient for the specified SDK Key.
 * @remarks This method returns a single, shared instance per each distinct SDK Key.
 * That is, a new client object is created only when there is none available for the specified SDK Key.
 * Otherwise, the already created instance is returned (in which case the 'pollingMode' and 'options' arguments are ignored).
 * So, please keep in mind that when you make multiple calls to this method using the same SDK Key, you may end up with multiple references to the same client object.
 * @param sdkKey SDK Key to access configuration
 * @param pollingMode The polling mode to use
 * @param options Options for the specified polling mode
 */
export declare function getClient<TMode extends PollingMode | undefined>(sdkKey: string, pollingMode?: TMode, options?: OptionsForPollingMode<TMode>): IConfigCatClient;
/**
 * Disposes all existing ConfigCatClient instances.
 */
export declare function disposeAllClients(): void;
/** Create an instance of ConfigCatClient and setup Auto Polling mode with default options
 * @param {string} sdkKey - ConfigCat SdkKey to access your configuration.
 * @param options - Options for Auto Polling
 * @deprecated This function is obsolete and will be removed from the public API in a future major version. To obtain a ConfigCatClient instance with auto polling for a specific SDK Key, please use the 'getClient(sdkKey, PollingMode.AutoPoll, options, ...)' format.
 */
export declare function createClient(sdkKey: string, options?: INodeAutoPollOptions): IConfigCatClient;
/**
 * Create an instance of ConfigCatClient and setup Auto Polling mode with custom options
 * @param {string} sdkKey - ConfigCat SdkKey to access your configuration.
 * @param options - Options for Auto Polling
 * @deprecated This function is obsolete and will be removed from the public API in a future major version. To obtain a ConfigCatClient instance with auto polling for a specific SDK Key, please use the 'getClient(sdkKey, PollingMode.AutoPoll, options, ...)' format.
 */
export declare function createClientWithAutoPoll(sdkKey: string, options?: INodeAutoPollOptions): IConfigCatClient;
/**
 * Create an instance of ConfigCatClient and setup Manual Polling mode with custom options
 * @param {string} sdkKey - ConfigCat SdkKey to access your configuration.
 * @param options - Options for Manual Polling
 * @deprecated This function is obsolete and will be removed from the public API in a future major version. To obtain a ConfigCatClient instance with manual polling for a specific SDK Key, please use the 'getClient(sdkKey, PollingMode.ManualPoll, options, ...)' format.
 */
export declare function createClientWithManualPoll(sdkKey: string, options?: INodeManualPollOptions): IConfigCatClient;
/**
 * Create an instance of ConfigCatClient and setup Lazy Loading mode with custom options
 * @param {string} sdkKey - ConfigCat SdkKey to access your configuration.
 * @param options - Option for Lazy Loading
 * @deprecated This function is obsolete and will be removed from the public API in a future major version. To obtain a ConfigCatClient instance with lazy loading for a specific SDK Key, please use the 'getClient(sdkKey, PollingMode.LazyLoad, options, ...)' format.
 */
export declare function createClientWithLazyLoad(sdkKey: string, options?: INodeLazyLoadingOptions): IConfigCatClient;
/**
 * Create an instance of ConfigCatConsoleLogger
 * @param logLevel Specifies message's filtering to output for the CofigCatConsoleLogger.
 */
export declare function createConsoleLogger(logLevel: LogLevel): IConfigCatLogger;
export declare function createFlagOverridesFromMap(map: {
    [name: string]: any;
}, behaviour: number): FlagOverrides;
export interface INodeAutoPollOptions extends IAutoPollOptions {
}
export interface INodeLazyLoadingOptions extends ILazyLoadingOptions {
}
export interface INodeManualPollOptions extends IManualPollOptions {
}
export type OptionsForPollingMode<TMode extends PollingMode | undefined> = TMode extends PollingMode.AutoPoll ? INodeAutoPollOptions : TMode extends PollingMode.ManualPoll ? INodeManualPollOptions : TMode extends PollingMode.LazyLoad ? INodeLazyLoadingOptions : TMode extends undefined ? INodeAutoPollOptions : never;
export { PollingMode } from "configcat-common";
export type { IOptions } from "configcat-common";
export type { IAutoPollOptions, IManualPollOptions, ILazyLoadingOptions } from "configcat-common";
export { DataGovernance } from "configcat-common";
export type { IConfigCatLogger } from "configcat-common";
export { LogLevel } from "configcat-common";
export type { ICache } from "configcat-common";
export { ProjectConfig, RolloutRule, RolloutPercentageItem, Setting } from "configcat-common";
export type { IConfigCatClient } from "configcat-common";
export { SettingKeyValue } from "configcat-common";
export type { IEvaluationDetails, SettingTypeOf, SettingValue, VariationIdTypeOf, VariationIdValue } from "configcat-common";
export { User } from "configcat-common";
export type { IOverrideDataSource } from "configcat-common";
export { FlagOverrides, MapOverrideDataSource, OverrideBehaviour } from "configcat-common";
export { RefreshResult } from "configcat-common";
export type { IProvidesHooks, HookEvents } from "configcat-common";
//# sourceMappingURL=client.d.ts.map