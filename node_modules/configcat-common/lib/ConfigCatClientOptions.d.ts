import { ICache } from "./Cache";
import { IConfigCatLogger, LoggerWrapper } from "./ConfigCatLogger";
import type { IEventEmitter } from "./EventEmitter";
import { FlagOverrides } from "./FlagOverrides";
import { Hooks, IProvidesHooks } from "./Hooks";
import { User } from "./RolloutEvaluator";
export declare enum PollingMode {
    AutoPoll = 0,
    LazyLoad = 1,
    ManualPoll = 2
}
/** Control the location of the config.json files containing your feature flags and settings within the ConfigCat CDN. */
export declare enum DataGovernance {
    /** Select this if your feature flags are published to all global CDN nodes. */
    Global = 0,
    /** Select this if your feature flags are published to CDN nodes only in the EU. */
    EuOnly = 1
}
export interface IOptions {
    logger?: IConfigCatLogger | null;
    requestTimeoutMs?: number | null;
    baseUrl?: string | null;
    /** You can set a base_url if you want to use a proxy server between your application and ConfigCat */
    proxy?: string | null;
    /** Default: Global. Set this parameter to be in sync with the Data Governance preference on the Dashboard:
     * https://app.configcat.com/organization/data-governance (Only Organization Admins have access) */
    dataGovernance?: DataGovernance | null;
    /**
     * ICache instance for cache the config.
     */
    cache?: ICache | null;
    flagOverrides?: FlagOverrides | null;
    /**
     * The default user, used as fallback when there's no user parameter is passed to the
     * ConfigCatClient.getValue, ConfigCatClient.getValueAsync, getVariationId, getVariationIdAsync, getAllValues, getAllValuesAsync, etc. methods.
     */
    defaultUser?: User | null;
    /**
     * Indicates whether the client should be initialized to offline mode or not. Defaults to false.
     */
    offline?: boolean | null;
    /** Provides an opportunity to add listeners to client hooks (events) at client initalization time. */
    setupHooks?: (hooks: IProvidesHooks) => void;
}
export interface IAutoPollOptions extends IOptions {
    pollIntervalSeconds?: number;
    maxInitWaitTimeSeconds?: number;
    configChanged?: () => void;
}
export interface IManualPollOptions extends IOptions {
}
export interface ILazyLoadingOptions extends IOptions {
    cacheTimeToLiveSeconds?: number;
}
export type OptionsForPollingMode<TMode extends PollingMode> = TMode extends PollingMode.AutoPoll ? IAutoPollOptions : TMode extends PollingMode.ManualPoll ? IManualPollOptions : TMode extends PollingMode.LazyLoad ? ILazyLoadingOptions : never;
export declare abstract class OptionsBase implements IOptions {
    private configFileName;
    logger: LoggerWrapper;
    apiKey: string;
    clientVersion: string;
    requestTimeoutMs: number;
    baseUrl: string;
    baseUrlOverriden: boolean;
    proxy: string;
    dataGovernance: DataGovernance;
    cache: ICache;
    flagOverrides?: FlagOverrides;
    defaultUser?: User;
    offline: boolean;
    hooks: Hooks;
    constructor(apiKey: string, clientVersion: string, options?: IOptions | null, defaultCache?: ICache | null, eventEmitterFactory?: (() => IEventEmitter) | null);
    getUrl(): string;
    getCacheKey(): string;
}
export declare class AutoPollOptions extends OptionsBase implements IAutoPollOptions {
    /** The client's poll interval in seconds. Default: 60 seconds. */
    pollIntervalSeconds: number;
    /** You can subscribe to configuration changes with this callback.
     * @deprecated This property is obsolete and will be removed from the public API in a future major version. Please use the 'options.setupHooks = hooks => hooks.on("configChanged", ...)' format instead.
    */
    configChanged: () => void;
    /** Maximum waiting time between the client initialization and the first config acquisition in seconds. */
    maxInitWaitTimeSeconds: number;
    constructor(apiKey: string, sdkType: string, sdkVersion: string, options?: IAutoPollOptions | null, defaultCache?: ICache | null, eventEmitterFactory?: (() => IEventEmitter) | null);
}
export declare class ManualPollOptions extends OptionsBase implements IManualPollOptions {
    constructor(apiKey: string, sdkType: string, sdkVersion: string, options?: IManualPollOptions | null, defaultCache?: ICache | null, eventEmitterFactory?: (() => IEventEmitter) | null);
}
export declare class LazyLoadOptions extends OptionsBase implements ILazyLoadingOptions {
    /** The cache TTL. */
    cacheTimeToLiveSeconds: number;
    constructor(apiKey: string, sdkType: string, sdkVersion: string, options?: ILazyLoadingOptions | null, defaultCache?: ICache | null, eventEmitterFactory?: (() => IEventEmitter) | null);
}
export type ConfigCatClientOptions = AutoPollOptions | ManualPollOptions | LazyLoadOptions;
//# sourceMappingURL=ConfigCatClientOptions.d.ts.map