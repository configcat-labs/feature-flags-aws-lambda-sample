"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RefreshResult = exports.OverrideBehaviour = exports.MapOverrideDataSource = exports.FlagOverrides = exports.User = exports.SettingKeyValue = exports.Setting = exports.RolloutPercentageItem = exports.RolloutRule = exports.ProjectConfig = exports.LogLevel = exports.DataGovernance = exports.PollingMode = exports.InMemoryCache = exports.OptionsBase = exports.FetchError = exports.FetchResult = exports.FetchStatus = exports.createConsoleLogger = exports.createClientWithLazyLoad = exports.createClientWithManualPoll = exports.createClientWithAutoPoll = exports.disposeAllClients = exports.getClient = void 0;
var ConfigCatClient_1 = require("./ConfigCatClient");
var ConfigCatClientOptions_1 = require("./ConfigCatClientOptions");
Object.defineProperty(exports, "PollingMode", { enumerable: true, get: function () { return ConfigCatClientOptions_1.PollingMode; } });
var ConfigCatLogger_1 = require("./ConfigCatLogger");
Object.defineProperty(exports, "LogLevel", { enumerable: true, get: function () { return ConfigCatLogger_1.LogLevel; } });
var Polyfills_1 = require("./Polyfills");
(0, Polyfills_1.setupPolyfills)();
/**
 * Returns an instance of ConfigCatClient for the specified SDK Key.
 * @remarks This method returns a single, shared instance per each distinct SDK Key.
 * That is, a new client object is created only when there is none available for the specified SDK Key.
 * Otherwise, the already created instance is returned (in which case the 'pollingMode', 'options' and 'configCatKernel' arguments are ignored).
 * So, please keep in mind that when you make multiple calls to this method using the same SDK Key, you may end up with multiple references to the same client object.
 * @param sdkKey SDK Key (a.k.a ApiKey) to access configuration
 * @param pollingMode The polling mode to use
 * @param options Options for the specified polling mode
 */
function getClient(sdkKey, pollingMode, options, configCatKernel) {
    return ConfigCatClient_1.ConfigCatClient.get(sdkKey, pollingMode, options, configCatKernel);
}
exports.getClient = getClient;
/**
 * Disposes all existing ConfigCatClient instances.
 */
function disposeAllClients() {
    ConfigCatClient_1.ConfigCatClient.disposeAll();
}
exports.disposeAllClients = disposeAllClients;
/**
 * Create an instance of ConfigCatClient and setup AutoPoll mode
 * @param {string} apiKey - ApiKey to access your configuration.
 * @param config - Configuration for autoPoll mode
 * @deprecated This function is obsolete and will be removed from the public API in a future major version. To obtain a ConfigCatClient instance with auto polling for a specific SDK Key, please use the 'getClient(sdkKey, PollingMode.AutoPoll, options, ...)' format.
 */
function createClientWithAutoPoll(apiKey, configCatKernel, options) {
    return new ConfigCatClient_1.ConfigCatClient(new ConfigCatClientOptions_1.AutoPollOptions(apiKey, configCatKernel.sdkType, configCatKernel.sdkVersion, options, configCatKernel.cache, configCatKernel.eventEmitterFactory), configCatKernel);
}
exports.createClientWithAutoPoll = createClientWithAutoPoll;
/**
 * Create an instance of ConfigCatClient and setup ManualPoll mode
 * @param {string} apiKey - ApiKey to access your configuration.
 * @param config - Configuration for manualPoll mode
 * @deprecated This function is obsolete and will be removed from the public API in a future major version. To obtain a ConfigCatClient instance with manual polling for a specific SDK Key, please use the 'getClient(sdkKey, PollingMode.ManualPoll, options, ...)' format.
 */
function createClientWithManualPoll(apiKey, configCatKernel, options) {
    return new ConfigCatClient_1.ConfigCatClient(new ConfigCatClientOptions_1.ManualPollOptions(apiKey, configCatKernel.sdkType, configCatKernel.sdkVersion, options, configCatKernel.cache, configCatKernel.eventEmitterFactory), configCatKernel);
}
exports.createClientWithManualPoll = createClientWithManualPoll;
/**
 * Create an instance of ConfigCatClient and setup LazyLoad mode
 * @param {string} apiKey - ApiKey to access your configuration.
 * @param config - Configuration for lazyLoad mode
 * @deprecated This function is obsolete and will be removed from the public API in a future major version. To obtain a ConfigCatClient instance with lazy loading for a specific SDK Key, please use the 'getClient(sdkKey, PollingMode.LazyLoad, options, ...)' format.
 */
function createClientWithLazyLoad(apiKey, configCatKernel, options) {
    return new ConfigCatClient_1.ConfigCatClient(new ConfigCatClientOptions_1.LazyLoadOptions(apiKey, configCatKernel.sdkType, configCatKernel.sdkVersion, options, configCatKernel.cache, configCatKernel.eventEmitterFactory), configCatKernel);
}
exports.createClientWithLazyLoad = createClientWithLazyLoad;
/**
 * Create an instance of ConfigCatConsoleLogger
 * @param {LogLevel} logLevel - Specifies message's filtering to output for the ConfigCatConsoleLogger.
 */
function createConsoleLogger(logLevel) {
    return new ConfigCatLogger_1.ConfigCatConsoleLogger(logLevel);
}
exports.createConsoleLogger = createConsoleLogger;
var ConfigFetcher_1 = require("./ConfigFetcher");
Object.defineProperty(exports, "FetchStatus", { enumerable: true, get: function () { return ConfigFetcher_1.FetchStatus; } });
Object.defineProperty(exports, "FetchResult", { enumerable: true, get: function () { return ConfigFetcher_1.FetchResult; } });
Object.defineProperty(exports, "FetchError", { enumerable: true, get: function () { return ConfigFetcher_1.FetchError; } });
var ConfigCatClientOptions_2 = require("./ConfigCatClientOptions");
Object.defineProperty(exports, "OptionsBase", { enumerable: true, get: function () { return ConfigCatClientOptions_2.OptionsBase; } });
var Cache_1 = require("./Cache");
Object.defineProperty(exports, "InMemoryCache", { enumerable: true, get: function () { return Cache_1.InMemoryCache; } });
var ConfigCatClientOptions_3 = require("./ConfigCatClientOptions");
Object.defineProperty(exports, "DataGovernance", { enumerable: true, get: function () { return ConfigCatClientOptions_3.DataGovernance; } });
var ProjectConfig_1 = require("./ProjectConfig");
Object.defineProperty(exports, "ProjectConfig", { enumerable: true, get: function () { return ProjectConfig_1.ProjectConfig; } });
Object.defineProperty(exports, "RolloutRule", { enumerable: true, get: function () { return ProjectConfig_1.RolloutRule; } });
Object.defineProperty(exports, "RolloutPercentageItem", { enumerable: true, get: function () { return ProjectConfig_1.RolloutPercentageItem; } });
Object.defineProperty(exports, "Setting", { enumerable: true, get: function () { return ProjectConfig_1.Setting; } });
var ConfigCatClient_2 = require("./ConfigCatClient");
Object.defineProperty(exports, "SettingKeyValue", { enumerable: true, get: function () { return ConfigCatClient_2.SettingKeyValue; } });
var RolloutEvaluator_1 = require("./RolloutEvaluator");
Object.defineProperty(exports, "User", { enumerable: true, get: function () { return RolloutEvaluator_1.User; } });
var FlagOverrides_1 = require("./FlagOverrides");
Object.defineProperty(exports, "FlagOverrides", { enumerable: true, get: function () { return FlagOverrides_1.FlagOverrides; } });
Object.defineProperty(exports, "MapOverrideDataSource", { enumerable: true, get: function () { return FlagOverrides_1.MapOverrideDataSource; } });
Object.defineProperty(exports, "OverrideBehaviour", { enumerable: true, get: function () { return FlagOverrides_1.OverrideBehaviour; } });
var ConfigServiceBase_1 = require("./ConfigServiceBase");
Object.defineProperty(exports, "RefreshResult", { enumerable: true, get: function () { return ConfigServiceBase_1.RefreshResult; } });
