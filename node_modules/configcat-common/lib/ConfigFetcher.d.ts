import { OptionsBase } from "./ConfigCatClientOptions";
export declare enum FetchStatus {
    Fetched = 0,
    NotModified = 1,
    Errored = 2
}
export declare class FetchResult {
    status: FetchStatus;
    responseBody: string;
    eTag?: string | undefined;
    errorMessage?: string | undefined;
    errorException?: any;
    private constructor();
    static success(responseBody: string, eTag: string): FetchResult;
    static notModified(): FetchResult;
    static error(errorMessage?: string, errorException?: any): FetchResult;
}
export interface IFetchResponse {
    statusCode: number;
    reasonPhrase: string;
    eTag?: string;
    body?: string;
}
export type FetchErrorCauses = {
    abort: [];
    timeout: [timeoutMs: number];
    failure: [err?: any];
};
export declare class FetchError<TCause extends keyof FetchErrorCauses> extends Error {
    cause: TCause;
    args: FetchErrorCauses[TCause];
    constructor(cause: TCause, ...args: FetchErrorCauses[TCause]);
}
export interface IConfigFetcher {
    fetchLogic(options: OptionsBase, lastEtag: string | null): Promise<IFetchResponse>;
}
//# sourceMappingURL=ConfigFetcher.d.ts.map