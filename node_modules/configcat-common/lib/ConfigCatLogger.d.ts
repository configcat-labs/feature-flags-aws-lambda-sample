import { Hooks } from "./Hooks";
export declare enum LogLevel {
    Debug = 4,
    Info = 3,
    Warn = 2,
    Error = 1,
    Off = -1
}
export interface IConfigCatLogger {
    readonly level?: LogLevel;
    debug(message: string): void;
    /**
     * @deprecated Use `debug(message: string)` method instead of this
     */
    log(message: string): void;
    info(message: string): void;
    warn(message: string): void;
    error(message: string): void;
}
export declare class LoggerWrapper implements IConfigCatLogger {
    private logger;
    private hooks?;
    get level(): LogLevel;
    constructor(logger: IConfigCatLogger, hooks?: Hooks | undefined);
    log(message: string): void;
    debug(message: string): void;
    info(message: string): void;
    warn(message: string): void;
    error(message: string, err?: any): void;
    private isLogLevelEnabled;
}
export declare class ConfigCatConsoleLogger implements IConfigCatLogger {
    level: LogLevel;
    SOURCE: string;
    /**
     * Create an instance of ConfigCatConsoleLogger
     */
    constructor(level?: LogLevel);
    /** @inheritdoc */
    log(message: string): void;
    /** @inheritdoc */
    debug(message: string): void;
    /** @inheritdoc */
    info(message: string): void;
    /** @inheritdoc */
    warn(message: string): void;
    /** @inheritdoc */
    error(message: string): void;
}
//# sourceMappingURL=ConfigCatLogger.d.ts.map