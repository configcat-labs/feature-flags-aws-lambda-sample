import { __awaiter, __extends, __generator } from "tslib";
import { ConfigServiceBase } from "./ConfigServiceBase";
import { ProjectConfig } from "./ProjectConfig";
var LazyLoadConfigService = /** @class */ (function (_super) {
    __extends(LazyLoadConfigService, _super);
    function LazyLoadConfigService(configFetcher, options) {
        var _this = _super.call(this, configFetcher, options) || this;
        _this.cacheTimeToLiveSeconds = options.cacheTimeToLiveSeconds;
        options.hooks.emit("clientReady");
        return _this;
    }
    LazyLoadConfigService.prototype.getConfig = function () {
        return __awaiter(this, void 0, void 0, function () {
            function logExpired(logger, appendix) {
                if (appendix === void 0) { appendix = ""; }
                logger.debug("LazyLoadConfigService.getConfig(): cache is empty or expired".concat(appendix, "."));
            }
            var config;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.options.logger.debug("LazyLoadConfigService.getConfig() called.");
                        return [4 /*yield*/, this.options.cache.get(this.options.getCacheKey())];
                    case 1:
                        config = _b.sent();
                        if (!ProjectConfig.isExpired(config, this.cacheTimeToLiveSeconds * 1000)) return [3 /*break*/, 5];
                        if (!!this.isOffline) return [3 /*break*/, 3];
                        logExpired(this.options.logger, ", calling refreshConfigCoreAsync()");
                        return [4 /*yield*/, this.refreshConfigCoreAsync(config)];
                    case 2:
                        _a = _b.sent(), config = _a[1];
                        return [3 /*break*/, 4];
                    case 3:
                        logExpired(this.options.logger);
                        _b.label = 4;
                    case 4: return [2 /*return*/, config];
                    case 5:
                        this.options.logger.debug("LazyLoadConfigService.getConfig(): cache is valid, returning from cache.");
                        return [2 /*return*/, config];
                }
            });
        });
    };
    LazyLoadConfigService.prototype.refreshConfigAsync = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.options.logger.debug("LazyLoadConfigService.refreshConfigAsync() called.");
                return [2 /*return*/, _super.prototype.refreshConfigAsync.call(this)];
            });
        });
    };
    return LazyLoadConfigService;
}(ConfigServiceBase));
export { LazyLoadConfigService };
