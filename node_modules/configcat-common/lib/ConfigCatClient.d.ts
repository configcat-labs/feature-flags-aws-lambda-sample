import type { ICache } from "./Cache";
import { ConfigCatClientOptions, OptionsForPollingMode, PollingMode } from "./ConfigCatClientOptions";
import type { IConfigFetcher } from "./ConfigFetcher";
import { RefreshResult } from "./ConfigServiceBase";
import type { IEventEmitter } from "./EventEmitter";
import type { HookEvents, IProvidesHooks } from "./Hooks";
import { IEvaluationDetails, SettingTypeOf, SettingValue, User, VariationIdTypeOf, VariationIdValue } from "./RolloutEvaluator";
export interface IConfigCatClient extends IProvidesHooks {
    /** Returns the value of a feature flag or setting based on it's key
     * @deprecated This method is obsolete and will be removed from the public API in a future major version. Please use the getValueAsync() method instead.
     */
    getValue<T extends SettingValue>(key: string, defaultValue: T, callback: (value: SettingTypeOf<T>) => void, user?: User): void;
    /** Returns the value of a feature flag or setting based on it's key */
    getValueAsync<T extends SettingValue>(key: string, defaultValue: T, user?: User): Promise<SettingTypeOf<T>>;
    /** Returns the value along with evaluation details of a feature flag or setting based on it's key
     * @deprecated This method is obsolete and will be removed from the public API in a future major version. Please use the getValueDetailsAsync() method instead.
     */
    getValueDetails<T extends SettingValue>(key: string, defaultValue: T, callback: (evaluationDetails: IEvaluationDetails<SettingTypeOf<T>>) => void, user?: User): void;
    /** Returns the value along with evaluation details of a feature flag or setting based on it's key */
    getValueDetailsAsync<T extends SettingValue>(key: string, defaultValue: T, user?: User): Promise<IEvaluationDetails<SettingTypeOf<T>>>;
    /** Downloads the latest feature flag and configuration values
     * @deprecated This method is obsolete and will be removed from the public API in a future major version. Please use the forceRefreshAsync() method instead.
     */
    forceRefresh(callback: (result: RefreshResult) => void): void;
    /** Downloads the latest feature flag and configuration values */
    forceRefreshAsync(): Promise<RefreshResult>;
    /** Gets a list of keys for all your feature flags and settings
     * @deprecated This method is obsolete and will be removed from the public API in a future major version. Please use the getAllKeysAsync() method instead.
     */
    getAllKeys(callback: (value: string[]) => void): void;
    /** Gets a list of keys for all your feature flags and settings */
    getAllKeysAsync(): Promise<string[]>;
    /** Returns the Variation ID (analytics) of a feature flag or setting based on it's key
     * @deprecated This method is obsolete and will be removed from the public API in a future major version. Please use the getValueDetails() method instead.
     */
    getVariationId<T extends VariationIdValue>(key: string, defaultVariationId: T, callback: (variationId: VariationIdTypeOf<T>) => void, user?: User): void;
    /** Returns the Variation ID (analytics) of a feature flag or setting based on it's key
     * @deprecated This method is obsolete and will be removed from the public API in a future major version. Please use the getValueDetailsAsync() method instead.
     */
    getVariationIdAsync<T extends VariationIdValue>(key: string, defaultVariationId: T, user?: User): Promise<VariationIdTypeOf<T>>;
    /** Returns the Variation IDs (analytics) of all feature flags or settings
     * @deprecated This method is obsolete and will be removed from the public API in a future major version. Please use the getAllValueDetails() method instead.
     */
    getAllVariationIds(callback: (variationIds: string[]) => void, user?: User): void;
    /** Returns the Variation IDs (analytics) of all feature flags or settings
     * @deprecated This method is obsolete and will be removed from the public API in a future major version. Please use the getAllValueDetailsAsync() method instead.
     */
    getAllVariationIdsAsync(user?: User): Promise<string[]>;
    /** Returns the key of a setting and it's value identified by the given Variation ID (analytics)
     * @deprecated This method is obsolete and will be removed from the public API in a future major version. Please use the getKeyAndValueAsync() method instead.
     */
    getKeyAndValue(variationId: string, callback: (settingkeyAndValue: SettingKeyValue | null) => void): void;
    /** Returns the key of a setting and it's value identified by the given Variation ID (analytics) */
    getKeyAndValueAsync(variationId: string): Promise<SettingKeyValue | null>;
    /** Releases all resources used by IConfigCatClient */
    dispose(): void;
    /** Returns the values of all feature flags or settings
     * @deprecated This method is obsolete and will be removed from the public API in a future major version. Please use the getAllValuesAsync() method instead.
     */
    getAllValues(callback: (result: SettingKeyValue[]) => void, user?: User): void;
    /** Returns the values of all feature flags or settings */
    getAllValuesAsync(user?: User): Promise<SettingKeyValue[]>;
    /** Returns the values along with evaluation details of all feature flags or settings
     * @deprecated This method is obsolete and will be removed from the public API in a future major version. Please use the getAllValueDetailsAsync() method instead.
     */
    getAllValueDetails(callback: (result: IEvaluationDetails[]) => void, user?: User): void;
    /** Returns the values along with evaluation details of all feature flags or settings */
    getAllValueDetailsAsync(user?: User): Promise<IEvaluationDetails[]>;
    /** Sets the default user for feature flag evaluations.
     * In case the getValue function isn't called with a UserObject, this default user will be used instead. */
    setDefaultUser(defaultUser: User): void;
    /** Clears the default user. */
    clearDefaultUser(): void;
    /** True when the client is configured not to initiate HTTP requests, otherwise false. */
    get isOffline(): boolean;
    /** Configures the client to allow HTTP requests. */
    setOnline(): void;
    /** Configures the client to not initiate HTTP requests and work only from its cache. */
    setOffline(): void;
}
export interface IConfigCatKernel {
    configFetcher: IConfigFetcher;
    /**
     * Default ICache implementation.
     */
    cache?: ICache;
    sdkType: string;
    sdkVersion: string;
    eventEmitterFactory?: () => IEventEmitter;
}
export declare class ConfigCatClientCache {
    private instances;
    getOrCreate(options: ConfigCatClientOptions, configCatKernel: IConfigCatKernel): [ConfigCatClient, boolean];
    remove(sdkKey: string, cacheToken: object): boolean;
    clear(): ConfigCatClient[];
}
export declare class ConfigCatClient implements IConfigCatClient {
    private cacheToken?;
    private configService?;
    private evaluator;
    private options;
    private defaultUser?;
    private suppressFinalize;
    private static get instanceCache();
    static get<TMode extends PollingMode>(sdkKey: string, pollingMode: TMode, options: OptionsForPollingMode<TMode> | undefined | null, configCatKernel: IConfigCatKernel): IConfigCatClient;
    constructor(options: ConfigCatClientOptions, configCatKernel: IConfigCatKernel, cacheToken?: object | undefined);
    private static finalize;
    private static close;
    dispose(): void;
    static disposeAll(): void;
    getValue<T extends SettingValue>(key: string, defaultValue: T, callback: (value: SettingTypeOf<T>) => void, user?: User): void;
    getValueAsync<T extends SettingValue>(key: string, defaultValue: T, user?: User): Promise<SettingTypeOf<T>>;
    getValueDetails<T extends SettingValue>(key: string, defaultValue: T, callback: (evaluationDetails: IEvaluationDetails<SettingTypeOf<T>>) => void, user?: User): void;
    getValueDetailsAsync<T extends SettingValue>(key: string, defaultValue: T, user?: User): Promise<IEvaluationDetails<SettingTypeOf<T>>>;
    forceRefresh(callback: (result: RefreshResult) => void): void;
    forceRefreshAsync(): Promise<RefreshResult>;
    getAllKeys(callback: (value: string[]) => void): void;
    getAllKeysAsync(): Promise<string[]>;
    getVariationId<T extends VariationIdValue>(key: string, defaultVariationId: T, callback: (variationId: VariationIdTypeOf<T>) => void, user?: User): void;
    getVariationIdAsync<T extends VariationIdValue>(key: string, defaultVariationId: T, user?: User): Promise<VariationIdTypeOf<T>>;
    getAllVariationIds(callback: (variationIds: string[]) => void, user?: User): void;
    getAllVariationIdsAsync(user?: User): Promise<string[]>;
    getKeyAndValue(variationId: string, callback: (settingkeyAndValue: SettingKeyValue | null) => void): void;
    getKeyAndValueAsync(variationId: string): Promise<SettingKeyValue | null>;
    getAllValues(callback: (result: SettingKeyValue[]) => void, user?: User): void;
    getAllValuesAsync(user?: User): Promise<SettingKeyValue[]>;
    getAllValueDetails(callback: (result: IEvaluationDetails[]) => void, user?: User): void;
    getAllValueDetailsAsync(user?: User): Promise<IEvaluationDetails[]>;
    setDefaultUser(defaultUser: User): void;
    clearDefaultUser(): void;
    get isOffline(): boolean;
    setOnline(): void;
    setOffline(): void;
    private getSettingsAsync;
    /** @inheritdoc */
    addListener: <TEventName extends keyof HookEvents>(eventName: TEventName, listener: (...args: HookEvents[TEventName]) => void) => this;
    /** @inheritdoc */
    on<TEventName extends keyof HookEvents>(eventName: TEventName, listener: (...args: HookEvents[TEventName]) => void): this;
    /** @inheritdoc */
    once<TEventName extends keyof HookEvents>(eventName: TEventName, listener: (...args: HookEvents[TEventName]) => void): this;
    /** @inheritdoc */
    removeListener<TEventName extends keyof HookEvents>(eventName: TEventName, listener: (...args: HookEvents[TEventName]) => void): this;
    /** @inheritdoc */
    off: <TEventName extends keyof HookEvents>(eventName: TEventName, listener: (...args: HookEvents[TEventName]) => void) => this;
    /** @inheritdoc */
    removeAllListeners(eventName?: keyof HookEvents): this;
    /** @inheritdoc */
    listeners(eventName: keyof HookEvents): Function[];
    /** @inheritdoc */
    listenerCount(eventName: keyof HookEvents): number;
    /** @inheritdoc */
    eventNames(): Array<keyof HookEvents>;
}
export declare class SettingKeyValue<TValue = SettingValue> {
    settingKey: string;
    settingValue: TValue;
    constructor(settingKey: string, settingValue: TValue);
}
//# sourceMappingURL=ConfigCatClient.d.ts.map