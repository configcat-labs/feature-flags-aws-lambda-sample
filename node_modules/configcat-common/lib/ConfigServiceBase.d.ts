import { OptionsBase } from "./ConfigCatClientOptions";
import { FetchResult, IConfigFetcher } from "./ConfigFetcher";
import { ProjectConfig } from "./ProjectConfig";
export declare class RefreshResult {
    errorMessage: string | null;
    errorException?: any;
    constructor(errorMessage: string | null, errorException?: any);
    get isSuccess(): boolean;
    static from(fetchResult: FetchResult): RefreshResult;
    static success(): RefreshResult;
    static failure(errorMessage: string, errorException?: any): RefreshResult;
}
export interface IConfigService {
    getConfig(): Promise<ProjectConfig | null>;
    refreshConfigAsync(): Promise<[RefreshResult, ProjectConfig | null]>;
    get isOffline(): boolean;
    setOnline(): void;
    setOffline(): void;
    dispose(): void;
}
declare enum ConfigServiceStatus {
    Online = 0,
    Offline = 1,
    Disposed = 2
}
export declare abstract class ConfigServiceBase<TOptions extends OptionsBase> {
    protected configFetcher: IConfigFetcher;
    protected options: TOptions;
    private status;
    private pendingFetch;
    constructor(configFetcher: IConfigFetcher, options: TOptions);
    dispose(): void;
    protected get disposed(): boolean;
    abstract getConfig(): Promise<ProjectConfig | null>;
    refreshConfigAsync(): Promise<[RefreshResult, ProjectConfig | null]>;
    protected refreshConfigCoreAsync(latestConfig: ProjectConfig | null): Promise<[FetchResult, ProjectConfig | null]>;
    protected onConfigUpdated(newConfig: ProjectConfig): void;
    protected onConfigChanged(newConfig: ProjectConfig): void;
    private fetchAsync;
    private fetchLogicAsync;
    private fetchRequestAsync;
    protected get isOfflineExactly(): boolean;
    get isOffline(): boolean;
    protected setOnlineCore(): void;
    setOnline(): void;
    protected setOfflineCore(): void;
    setOffline(): void;
    logStatusChange(status: ConfigServiceStatus): void;
    logOfflineModeWarning(): void;
    logDisposedWarning(methodName: string): void;
}
export {};
//# sourceMappingURL=ConfigServiceBase.d.ts.map