import { LoggerWrapper } from "./ConfigCatLogger";
import { ProjectConfig, RolloutPercentageItem, RolloutRule, Setting } from "./ProjectConfig";
export type SettingValue = boolean | number | string | null | undefined;
export type SettingTypeOf<T> = T extends boolean ? boolean : T extends number ? number : T extends string ? string : T extends null ? boolean | number | string | null : T extends undefined ? boolean | number | string | undefined : any;
export type VariationIdValue = string | null | undefined;
export type VariationIdTypeOf<T> = T extends string ? string : T extends null ? string | null : T extends undefined ? string | undefined : any;
export interface IRolloutEvaluator {
    Evaluate(setting: Setting, key: string, defaultValue: SettingValue, user: User | undefined, remoteConfig: ProjectConfig | null, defaultVariationId?: VariationIdValue): IEvaluationDetails;
}
export interface IEvaluationDetails<TValue = SettingValue> {
    /** Key of the feature or setting flag. */
    key: string;
    /** Evaluated value of the feature or setting flag. */
    value: TValue;
    /** Variation ID of the feature or setting flag (if available). */
    variationId?: VariationIdValue;
    /** Time of last successful download of config.json (if there has been a successful download already). */
    fetchTime?: Date;
    /** The User object used for the evaluation (if available). */
    user?: User;
    /** Indicates whether the default value passed to IConfigCatClient.getValue or IConfigCatClient.getValueAsync is used as the result of the evaluation. */
    isDefaultValue: boolean;
    /** Error message in case evaluation failed. */
    errorMessage?: string;
    /** The exception object related to the error in case evaluation failed (if any). */
    errorException?: any;
    /** The comparison-based targeting rule which was used to select the evaluated value (if any). */
    matchedEvaluationRule?: RolloutRule;
    /** The percentage-based targeting rule which was used to select the evaluated value (if any). */
    matchedEvaluationPercentageRule?: RolloutPercentageItem;
}
/** Object for variation evaluation */
export declare class User {
    constructor(identifier: string, email?: string, country?: string, custom?: {
        [key: string]: string;
    });
    /** Unique identifier for the User or Session. e.g. Email address, Primary key, Session Id */
    identifier: string;
    /** Optional parameter for easier targeting rule definitions */
    email?: string;
    /** Optional parameter for easier targeting rule definitions */
    country?: string;
    /** Optional dictionary for custom attributes of the User for advanced targeting rule definitions. e.g. User role, Subscription type */
    custom?: {
        [key: string]: string;
    };
}
export declare class RolloutEvaluator implements IRolloutEvaluator {
    private logger;
    constructor(logger: LoggerWrapper);
    Evaluate(setting: Setting, key: string, defaultValue: SettingValue, user: User | undefined, remoteConfig: ProjectConfig | null): IEvaluationDetails;
    private EvaluateRules;
    private EvaluatePercentageRules;
    private EvaluateNumber;
    private EvaluateSemver;
    private GetUserAttribute;
    private RuleToString;
}
export declare function evaluationDetailsFromDefaultValue<T extends SettingValue>(key: string, defaultValue: T, fetchTime?: Date, user?: User, errorMessage?: string, errorException?: any): IEvaluationDetails<SettingTypeOf<T>>;
export declare function evaluationDetailsFromDefaultVariationId(key: string, defaultVariationId: VariationIdValue, fetchTime?: Date, user?: User, errorMessage?: string, errorException?: any): IEvaluationDetails;
export declare function evaluate<T extends SettingValue>(evaluator: IRolloutEvaluator, settings: {
    [name: string]: Setting;
} | null, key: string, defaultValue: T, user: User | undefined, remoteConfig: ProjectConfig | null, logger: LoggerWrapper): IEvaluationDetails<SettingTypeOf<T>>;
export declare function evaluateVariationId(evaluator: IRolloutEvaluator, settings: {
    [name: string]: Setting;
} | null, key: string, defaultVariationId: VariationIdValue, user: User | undefined, remoteConfig: ProjectConfig | null, logger: LoggerWrapper): IEvaluationDetails;
export declare function evaluateAll(evaluator: IRolloutEvaluator, settings: {
    [name: string]: Setting;
} | null, user: User | undefined, remoteConfig: ProjectConfig | null, logger: LoggerWrapper): [IEvaluationDetails[], any[] | undefined];
export declare function evaluateAllVariationIds(evaluator: IRolloutEvaluator, settings: {
    [name: string]: Setting;
} | null, user: User | undefined, remoteConfig: ProjectConfig | null, logger: LoggerWrapper): [IEvaluationDetails[], any[] | undefined];
export declare function checkSettingsAvailable(settings: {
    [name: string]: Setting;
} | null, logger: LoggerWrapper, appendix?: string): settings is {
    [name: string]: Setting;
};
export declare function ensureAllowedDefaultValue(value: SettingValue): void;
//# sourceMappingURL=RolloutEvaluator.d.ts.map